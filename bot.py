import os
import json
import logging
import uuid
from pathlib import Path
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import openai
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY


# ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
CHATS_DIR = Path("Chats")
DEFAULT_MESSAGES_COUNT = 750

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
UPLOAD, GET_NAME, CHAT_MODE = range(3)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def ensure_dirs():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    CHATS_DIR.mkdir(exist_ok=True)

def clean_data(data: list, interlocutor_name: str, max_messages: int = DEFAULT_MESSAGES_COUNT) -> list:
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:
    1. –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    3. –ë–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_messages —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    cleaned_messages = []
    
    for msg in reversed(data):
        if len(cleaned_messages) >= max_messages:
            break
            
        if not isinstance(msg, dict):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if msg.get("from") != interlocutor_name:
            continue
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = ""
        if "text" in msg:
            if isinstance(msg["text"], str):
                text = msg["text"]
            elif isinstance(msg["text"], list):
                text = "".join(
                    entity["text"] 
                    for entity in msg["text"] 
                    if isinstance(entity, dict) and "text" in entity
                )
        
        if not text.strip():
            continue
            
        cleaned_messages.append({
            "from": msg["from"],
            "text": text,
            "date": msg.get("date", "")
        })
    
    return list(reversed(cleaned_messages))

def save_conversation(user_id: int, data: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ JSON —Ñ–∞–π–ª"""
    filename = CHATS_DIR / f"{user_id}_{uuid.uuid4().hex}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    return filename

def generate_prompt(interlocutor_name: str, cleaned_data: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    messages = "\n".join(
        f"{msg['from']} ({msg['date']}): {msg['text']}" 
        for msg in cleaned_data
    )
    return (
        f"–¢—ã –∏–º–∏—Ç–∏—Ä—É–µ—à—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {interlocutor_name}.\n"
        "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        f"{messages}\n\n"
        "–û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ –±—ã –æ—Ç–≤–µ—Ç–∏–ª —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—Ç–∏–ª—å, "
        "–º–∞–Ω–µ—Ä—É —Ä–µ—á–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò. "
        "–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞."
        "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏, –¥–∞—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."
    )

async def get_ai_response(prompt: str, user_input: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Å—Ç–∏–ª—è"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_input}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message['content'].strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    instructions = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è.\n\n"
        "üìù –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n"
        "1. –û—Ç–∫—Ä–æ–π Telegram Desktop\n"
        "2. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –¥–∏–∞–ª–æ–≥\n"
        "3. –ù–∞–∂–º–∏ ‚ãÆ ‚Üí Export chat history\n"
        "4. –§–æ—Ä–º–∞—Ç: JSON\n"
        "5. –°–Ω–∏–º–∏ –≥–∞–ª–æ—á–∫–∏: 'Photos', 'Videos', 'Voice messages'\n"
        "6. –í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω: 'Last year' –∏–ª–∏ –¥—Ä—É–≥–æ–π\n"
        "7. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª\n\n"
        "–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è –±—É–¥—É –æ–±—â–∞—Ç—å—Å—è —Å—Ç–∏–ª–µ–º —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!"
    )
    
    await update.message.reply_text(instructions)
    return UPLOAD

async def handle_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞"""
    user = update.message.from_user
    user_id = user.id
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await context.bot.get_file(update.message.document.file_id)
        json_path = CHATS_DIR / f"temp_{user_id}.json"
        await file.download_to_drive(json_path)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
        if "messages" not in data or not isinstance(data["messages"], list):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–∏—Å–æ–∫ messages")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data['json_data'] = data
        await update.message.reply_text(
            "‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, "
            "—Å—Ç–∏–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å (–∫–∞–∫ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ):"
        )
        return GET_NAME
        
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞.")
    except Exception as e:
        logger.error(f"JSON processing error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
    finally:
        if 'json_path' in locals() and json_path.exists():
            os.remove(json_path)
    
    return ConversationHandler.END

async def handle_interlocutor_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    interlocutor_name = update.message.text
    user_data = context.user_data
    
    if 'json_data' not in user_data:
        await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        cleaned_data = clean_data(
            user_data['json_data']["messages"], 
            interlocutor_name
        )
        
        if not cleaned_data:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç '{interlocutor_name}'. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
            return GET_NAME
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        save_path = save_conversation(update.message.from_user.id, cleaned_data)
        prompt = generate_prompt(interlocutor_name, cleaned_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['prompt'] = prompt
        user_data['history'] = []
        
        await update.message.reply_text(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ù–∞–π–¥–µ–Ω–æ {len(cleaned_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {interlocutor_name}\n\n"
            "–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é –≤ –µ–≥–æ —Å—Ç–∏–ª–µ!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ —Ç–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞."
        )
        return CHAT_MODE
        
    except Exception as e:
        logger.error(f"Data processing error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        return ConversationHandler.END

async def chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Å—Ç–∏–ª—è"""
    user_input = update.message.text
    user_data = context.user_data
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data['history'].append({"role": "user", "content": user_input})
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await get_ai_response(
        prompt=user_data['prompt'],
        user_input=user_input
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    user_data['history'].append({"role": "assistant", "content": response})
    await update.message.reply_text(response)
    return CHAT_MODE

async def exit_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è"""
    await update.message.reply_text(
        "–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π JSON-—Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
def main():
    ensure_dirs()
    
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            UPLOAD: [
                MessageHandler(filters.Document.FileExtension("json"), handle_json),
                CommandHandler('cancel', cancel)
            ],
            GET_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_interlocutor_name),
                CommandHandler('cancel', cancel)
            ],
            CHAT_MODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, chat_mode),
                CommandHandler('exit', exit_chat)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    app.add_handler(conv_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()